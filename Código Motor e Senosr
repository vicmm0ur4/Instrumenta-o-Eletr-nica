 //------------------MOTOR------------------------------------------------------------------------------------------
#include <AFMotor.h>
AF_DCMotor motor(2);      // Motor na porta M2 do Shield
const int potPin = A12;    // Potenciômetro no pino A12
//-------------------------------------------------------------------------------------------------------------


//--------------- E N C O D E R ----------------------------------------------------------------------------------
#define ENCODER 18    // Pino digital para o sensor de velocidade (encoder)
#define N_DENTES 16   // Número de dentes da engrenagem

int pulseCount = 0; // Variável para contar os pulsos do encoder
unsigned long previousMillis = 0; // Tempo anterior para cálculo de RPM
const long interval = 100;  // Intervalo em ms para cálculo do RPM
float rpmvar = 0; // RPM instantâneo (real)
int q = 0;

// Média móvel
#define QTD_Mmovel 10 
float janelaRPM[QTD_Mmovel] = {0};  // Armazena últimas leituras
int indiceRPM = 0;
float rpmMovel = 0;

// Função de interrupção para contar os pulsos do encoder
void countPulse() {
  pulseCount++;
}
//-------------------------------------------------------------------------------------------------------------


void setup() {
  Serial.begin(9600);  // Inicializa comunicação serial

  // Encoder
  pinMode(ENCODER, INPUT);
  attachInterrupt(digitalPinToInterrupt(ENCODER), countPulse, RISING);

  // Motor
  motor.setSpeed(0);
  motor.run(FORWARD);
}


void loop() {
  // Leitura do potenciômetro e ajuste do PWM
  int potValue = analogRead(potPin);
  int pwmValue = map(potValue, 0, 1023, 0, 100); // Limite de PWM
  motor.setSpeed(pwmValue);

  // Cálculo de RPM a cada intervalo
  unsigned long currentMillis = millis();
  unsigned long deltaT = currentMillis - previousMillis;

  if (deltaT >= interval) {
    noInterrupts();
    int pulses = pulseCount;
    pulseCount = 0;
    interrupts();

    previousMillis = currentMillis;

    float rpm = ((float)pulses / N_DENTES) * (1000.0 / deltaT) * 60.0;
    rpmvar = rpm;

    // Média móvel
    janelaRPM[indiceRPM] = rpm;
    indiceRPM = (indiceRPM + 1) % QTD_Mmovel;
    float soma = 0;
    for (int i = 0; i < QTD_Mmovel; i++) {
      soma += janelaRPM[i];
    }
    rpmMovel = soma / QTD_Mmovel;
  }

  // PRINT FORMATADO — RPM lado a lado
  Serial.print("RPM Móvel: ");
  Serial.print(rpmMovel);
  Serial.print("   |   ");
  Serial.print("RPM Real: ");
  Serial.println(rpmvar);

  delay(100);  // Delay para leitura confortável
}
